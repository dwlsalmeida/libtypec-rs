#ifndef LIBTYPEC_RS_H
#define LIBTYPEC_RS_H

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * The Discover Modes Command returns a list of zero to six VDOs, each of which
 * describes a Mode.
 *
 * See 6.4.4.2.4 Object Position in USB-PD
 */
#define MAX_NUM_ALT_MODE 6

/**
 * See UCSI - Table A-2 Parameter Values
 */
#define UCSI_MAX_NUM_ALT_MODE 128

#define UCSI_CONNECTOR_CAPABILITY_OPERATION_MODE_RP_ONLY 1

#define UCSI_CONNECTOR_CAPABILITY_OPERATION_MODE_RD_ONLY 2

#define UCSI_CONNECTOR_CAPABILITY_OPERATION_MODE_DRP 4

#define UCSI_CONNECTOR_CAPABILITY_OPERATION_MODE_ANALOG_AUDIO_ACCESSORY_MODE 8

#define UCSI_CONNECTOR_CAPABILITY_OPERATION_MODE_DEBUG_ACCESSORY_MODE 16

#define UCSI_CONNECTOR_CAPABILITY_OPERATION_MODE_USB2 32

#define UCSI_CONNECTOR_CAPABILITY_OPERATION_MODE_USB3 64

#define UCSI_CONNECTOR_CAPABILITY_OPERATION_MODE_ALTERNATE_MODE 128

/**
 * The OS backends supported by the library.
 */
enum OsBackends {
  /**
   * A sysfs backend.
   */
  OsBackends_Sysfs,
  /**
   * A UCSI debugfs backend.
   */
  OsBackends_UcsiDebugfs,
};

enum Pd3p2FastRoleSwap {
  Pd3p2FastRoleSwap_NotSupported,
  Pd3p2FastRoleSwap_DefaultUsbPower,
  Pd3p2FastRoleSwap_OnePointFiveAAtFiveV,
  Pd3p2FastRoleSwap_ThreeAAtFiveV,
};

enum Pd3p2SceTouchTemp {
  Pd3p2SceTouchTemp_NotApplicable,
  Pd3p2SceTouchTemp_Iec60950_1,
  Pd3p2SceTouchTemp_Iec62368_1Ts1,
  Pd3p2SceTouchTemp_Iec62368_1Ts2,
};

enum Pd3p2VdoIdHeaderConnectorType {
  Pd3p2VdoIdHeaderConnectorType_TypecReceptacle,
  Pd3p2VdoIdHeaderConnectorType_TypecPlug,
};

enum Pd3p2VdoProductType {
  Pd3p2VdoProductType_PassiveCableVdo,
  Pd3p2VdoProductType_ActiveCableVdo,
  Pd3p2VdoProductType_VpdVdo,
  Pd3p2VdoProductType_UfpVdo,
  Pd3p2VdoProductType_DfpVdo,
};

enum Pd3p2VdoSopDfpProductType {
  Pd3p2VdoSopDfpProductType_NotADfp,
  Pd3p2VdoSopDfpProductType_PdUsbHub,
  Pd3p2VdoSopDfpProductType_PdUsbHost,
  Pd3p2VdoSopDfpProductType_PowerBrick,
};

enum Pd3p2VdoSopUfpProductType {
  Pd3p2VdoSopUfpProductType_NotAUfp,
  Pd3p2VdoSopUfpProductType_PdUsbHub,
  Pd3p2VdoSopUfpProductType_PdUsbPeripheral,
  Pd3p2VdoSopUfpProductType_Psd,
  Pd3p2VdoSopUfpProductType_NotACablePlugOrVPD,
  Pd3p2VdoSopUfpProductType_PassiveCable,
  Pd3p2VdoSopUfpProductType_ActiveCable,
  Pd3p2VdoSopUfpProductType_VConnPoweredUsbDevice,
};

enum PdCommand {
  PdCommand_DiscoverIdentity,
  PdCommand_DiscoverSVIDs,
  PdCommand_DiscoverModes,
  PdCommand_EnterMode,
  PdCommand_ExitMode,
  PdCommand_Attention,
  PdCommand_SVIDSpecific,
};

enum PdCommandType {
  PdCommandType_Request,
  PdCommandType_Ack,
  PdCommandType_Nak,
  PdCommandType_Busy,
};

enum PdMessageRecipient {
  PdMessageRecipient_Connector,
  PdMessageRecipient_Sop,
  PdMessageRecipient_SopPrime,
  PdMessageRecipient_SopDoublePrime,
};

enum PdMessageResponseType {
  PdMessageResponseType_SinkCapabilitiesExtended,
  PdMessageResponseType_SourceCapabilitiesExtended,
  PdMessageResponseType_BatteryCapabilities,
  PdMessageResponseType_BatteryStatus,
  PdMessageResponseType_DiscoverIdentity,
  PdMessageResponseType_Revision,
  PdMessageResponseType_Reserved,
};

enum UcsiBatteryChargingCapabilityStatus {
  UcsiBatteryChargingCapabilityStatus_NotCharging,
  UcsiBatteryChargingCapabilityStatus_NominalChargingRate,
  UcsiBatteryChargingCapabilityStatus_SlowChargingRate,
  UcsiBatteryChargingCapabilityStatus_VerySlowChargingRate,
};

enum UcsiCablePropertyDirectionality {
  UcsiCablePropertyDirectionality_Configurable,
  UcsiCablePropertyDirectionality_Fixed,
};

enum UcsiCablePropertyPlugEndType {
  UcsiCablePropertyPlugEndType_UsbTypeA,
  UcsiCablePropertyPlugEndType_UsbTypeB,
  UcsiCablePropertyPlugEndType_UsbTypeC,
  UcsiCablePropertyPlugEndType_OtherNotUsb,
};

enum UcsiCablePropertySpeedExponent {
  UcsiCablePropertySpeedExponent_Bps,
  UcsiCablePropertySpeedExponent_Kbps,
  UcsiCablePropertySpeedExponent_Mbps,
  UcsiCablePropertySpeedExponent_Gbps,
};

enum UcsiCablePropertyType {
  UcsiCablePropertyType_Passive,
  UcsiCablePropertyType_Active,
};

enum UcsiConnectorCapabilityExtendedOperationMode {
  UcsiConnectorCapabilityExtendedOperationMode_Usb4Gen2,
  UcsiConnectorCapabilityExtendedOperationMode_EprSource,
  UcsiConnectorCapabilityExtendedOperationMode_EprSink,
  UcsiConnectorCapabilityExtendedOperationMode_Usb4Gen3,
  UcsiConnectorCapabilityExtendedOperationMode_Usb4Gen4,
};

enum UcsiConnectorCapabilityMiscellaneousCapabilities {
  UcsiConnectorCapabilityMiscellaneousCapabilities_FwUpdate,
  UcsiConnectorCapabilityMiscellaneousCapabilities_Security,
};

enum UcsiConnectorOrientation {
  UcsiConnectorOrientation_Normal,
  UcsiConnectorOrientation_Reverse,
};

enum UcsiConnectorPartnerType {
  UcsiConnectorPartnerType_Reserved,
  UcsiConnectorPartnerType_DfpAttached,
  UcsiConnectorPartnerType_UfpAttached,
  UcsiConnectorPartnerType_PoweredCableNoUfpAttached,
  UcsiConnectorPartnerType_PoweredCableUfpAttached,
  UcsiConnectorPartnerType_DebugAccessoryAttached,
  UcsiConnectorPartnerType_AudioAdapterAccessoryAttached,
  UcsiConnectorPartnerType_Reserved2,
};

enum UcsiGetAlternateModesRecipient {
  UcsiGetAlternateModesRecipient_Connector,
  UcsiGetAlternateModesRecipient_Sop,
  UcsiGetAlternateModesRecipient_SopPrime,
  UcsiGetAlternateModesRecipient_SopDoublePrime,
};

enum UcsiPdoSourceCapabilitiesType {
  UcsiPdoSourceCapabilitiesType_CurrentSupportedSourceCapabilities,
  UcsiPdoSourceCapabilitiesType_AdvertisedCapabilities,
  UcsiPdoSourceCapabilitiesType_MaximumSupportedSourceCapabilities,
};

enum UcsiPdoType {
  UcsiPdoType_Sink,
  UcsiPdoType_Source,
};

enum UcsiPowerDirection {
  UcsiPowerDirection_Consumer,
  UcsiPowerDirection_Provider,
};

enum UcsiPowerOperationMode {
  UcsiPowerOperationMode_Reserved,
  UcsiPowerOperationMode_UsbDefaultOperation,
  UcsiPowerOperationMode_BatteryCharging,
  UcsiPowerOperationMode_PowerDelivery,
  UcsiPowerOperationMode_UsbTypeCCurrent1_5A,
  UcsiPowerOperationMode_UsbTypeCCurrent3A,
  UcsiPowerOperationMode_UsbTypeCCurrent5A,
  UcsiPowerOperationMode_Reserved2,
};

enum UcsiSinkPathStatus {
  UcsiSinkPathStatus_NotReady,
  UcsiSinkPathStatus_Ready,
};

/**
 * The main library struct.
 * # Examples
 *
 * ```
 * use libtypec_rs::TypecRs;
 * use libtypec_rs::OsBackends;
 *
 * let typec = TypecRs::new(OsBackends::Ucsi);
 * assert!(typec.is_ok());
 * ```
 */
struct TypecRs;

struct UcsiBmPowerSource {
  bool ac_supply;
  bool other;
  bool uses_vbus;
};

struct UcsiBmAttributes {
  bool disabled_state_support;
  bool battery_charging;
  bool usb_power_delivery;
  bool usb_type_c_current;
  struct UcsiBmPowerSource bm_power_source;
};

struct UcsiBmOptionalFeatures {
  bool set_ccom_supported;
  bool set_power_level_supported;
  bool alternate_mode_details_supported;
  bool alternate_mode_override_supported;
  bool pdo_details_supported;
  bool cable_details_supported;
  bool external_supply_notification_supported;
  bool pd_reset_notification_supported;
  bool get_pd_message_supported;
  bool get_attention_vdo_supported;
  bool fw_update_request_supported;
  bool negotiated_power_level_change_supported;
  bool security_request_supported;
  bool set_retimer_mode_supported;
  bool chunking_supported;
};

/**
 * A wrapper that can pretty-print the underlying BCD value.
 */
typedef uint32_t BcdWrapper;

struct UcsiCapability {
  struct UcsiBmAttributes bm_attributes;
  size_t num_connectors;
  struct UcsiBmOptionalFeatures bm_optional_features;
  size_t num_alt_modes;
  BcdWrapper bc_version;
  BcdWrapper pd_version;
  BcdWrapper usb_type_c_version;
};

/**
 * Connector capability data extended operation mode.
 */
typedef uint8_t UcsiConnectorCapabilityOperationMode;

struct UcsiConnectorCapability {
  UcsiConnectorCapabilityOperationMode operation_mode;
  bool provider;
  bool consumer;
  bool swap_to_dfp;
  bool swap_to_ufp;
  bool swap_to_src;
  bool swap_to_snk;
  enum UcsiConnectorCapabilityExtendedOperationMode extended_operation_mode;
  enum UcsiConnectorCapabilityMiscellaneousCapabilities miscellaneous_capabilities;
  bool reverse_current_protection_support;
  uint8_t partner_pd_revision;
};

struct UcsiAlternateMode {
  uint32_t svid[2];
  uint32_t vdo[2];
};

struct UcsiCableProperty {
  enum UcsiCablePropertySpeedExponent speed_exponent;
  uint16_t speed_mantissa;
  uint8_t b_current_capability;
  bool vbus_in_cable;
  enum UcsiCablePropertyType cable_type;
  enum UcsiCablePropertyDirectionality directionality;
  enum UcsiCablePropertyPlugEndType plug_end_type;
  bool mode_support;
  uint8_t cable_pd_revision;
  uint8_t latency;
};

struct UcsiConnectorStatusChange {
  bool reserved1;
  bool external_supply_change;
  bool power_operation_mode_change;
  bool attention;
  bool reserved2;
  bool supported_provider_capabilities_change;
  bool negotiated_power_level_change;
  bool pd_reset_complete;
  bool supported_cam_change;
  bool battery_charging_status_change;
  bool reserved3;
  bool connector_partner_changed;
};

struct UcsiConnectorStatus {
  struct UcsiConnectorStatusChange connector_status_change;
  enum UcsiPowerOperationMode power_operation_mode;
  bool connect_status;
  enum UcsiPowerDirection power_direction;
  uint32_t connector_partner_flags;
  enum UcsiConnectorPartnerType connector_partner_type;
  uint32_t negotiated_power_level;
  enum UcsiBatteryChargingCapabilityStatus battery_charging_capability_status;
  uint32_t provider_capabilities_limited_reason;
  uint32_t pd_version_operation_mode;
  enum UcsiConnectorOrientation orientation;
  enum UcsiSinkPathStatus sink_path_status;
  bool reverse_current_protection_status;
  bool power_reading_ready;
  uint32_t scale_current;
  uint32_t peak_current;
  uint32_t average_current;
  uint32_t scale_voltage;
  uint32_t voltage_reading;
};

struct Pd3p2SceLoadStep {
  bool load_step_150ma;
  bool load_step_500ma;
};

struct Pd3p2SinkLoadCharacteristics {
  bool percent_overload;
  bool overload_period;
  bool duty_cycle;
  bool vbus_voltage_droop;
};

struct Pd3p2SCEDCompliance {
  bool requires_lps_source;
  bool requires_ps1_source;
  bool requires_ps2_source;
};

struct Pd3p2SCEDSinkModes {
  bool pps_charging_supported;
  bool vbus_powered;
  bool mains_powered;
  bool battery_powered;
  bool battery_essentially_unlimited;
  bool avs_supported;
};

struct Pd3p2SinkCapabilitiesExtended {
  uint32_t vid;
  uint32_t pid;
  uint32_t xid;
  uint32_t fw_version;
  uint32_t hw_version;
  uint32_t skedb_version;
  struct Pd3p2SceLoadStep load_step;
  struct Pd3p2SinkLoadCharacteristics sink_load_characteristics;
  struct Pd3p2SCEDCompliance compliance;
  enum Pd3p2SceTouchTemp touch_temp;
  uint32_t battery_info;
  struct Pd3p2SCEDSinkModes sink_modes;
  uint32_t sink_minimum_pdp;
  uint32_t sink_operational_pdp;
};

struct Pd3p2SceVoltageRegulation {
  bool load_step_150ma;
  bool load_step_500ma;
  bool ioc_25_percent;
  bool ioc_90_percent;
};

struct Pd3p2SceCompliance {
  bool lps_compliant;
  bool ps1_compliant;
  bool ps2_compliant;
};

struct Pd3p2SceTouchCurrent {
  bool low_touch_current_eps;
  bool ground_pin_supported;
  bool ground_pin_for_protective_earth;
};

struct Pd3p2ScePeakCurrent {
  bool percent_overload;
  bool overload_period;
  bool duty_cycle;
  bool vbus_voltage_droop;
};

struct Pd3p2SceSourceInputs {
  bool no_external_supply;
  bool external_supply_constrained;
  bool internal_battery_present;
};

struct Pd3p2SourceCapabilitiesExtended {
  uint32_t vid;
  uint32_t pid;
  uint32_t xid;
  uint32_t fw_version;
  uint32_t hw_version;
  struct Pd3p2SceVoltageRegulation voltage_regulation;
  uint32_t holdup_time;
  struct Pd3p2SceCompliance compliance;
  struct Pd3p2SceTouchCurrent touch_current;
  struct Pd3p2ScePeakCurrent peak_current1;
  struct Pd3p2ScePeakCurrent peak_current2;
  struct Pd3p2ScePeakCurrent peak_current3;
  enum Pd3p2SceTouchTemp touch_temp;
  struct Pd3p2SceSourceInputs source_inputs;
  uint32_t num_batteries_slots;
  uint32_t spr_source_pdp_rating;
  uint32_t epr_source_pdp_rating;
};

struct Pd3p2BatteryCapData {
  uint32_t batteries_fixed[4];
  uint32_t batteries_hotswappable[4];
};

struct Pd3p2BSDBatteryInfo {
  bool invalid_battery_reference;
  bool battery_present;
  bool battery_charging;
  bool battery_discharging;
  bool battery_idle;
};

struct Pd3p2BatteryStatusData {
  uint32_t battery_present_capacity;
  struct Pd3p2BSDBatteryInfo battery_info;
};

struct PdVdmHeader {
  bool structured;
  uint8_t major;
  uint8_t minor;
  uint8_t object_position;
  enum PdCommandType command_type;
  enum PdCommand command;
};

struct Pd3p2VdoIdHeader {
  uint8_t vendor[32];
  bool usb_host_capability;
  bool usb_device_capability;
  enum Pd3p2VdoSopUfpProductType sop_product_type_ufp;
  bool modal_operation_supported;
  enum Pd3p2VdoSopDfpProductType sop_product_type_dfp;
  enum Pd3p2VdoIdHeaderConnectorType connector_type;
  uint32_t usb_vendor_id;
};

struct Pd3p2VdoCertStat {
  uint32_t xid;
};

struct Pd3p2VdoProduct {
  uint32_t product_id;
  BcdWrapper device;
};

struct Pd3p2DiscoverIdentityResponse {
  struct PdVdmHeader header;
  struct Pd3p2VdoIdHeader id_header_vdo;
  struct Pd3p2VdoCertStat cert_stat;
  struct Pd3p2VdoProduct product_vdo;
  enum Pd3p2VdoProductType product_type_vdo[3];
};

struct Pd3p2RevisionMessageData {
  uint32_t revision_major;
  uint32_t revision_minor;
  uint32_t version_major;
  uint32_t version_minor;
  uint32_t reserved;
};

enum PdMessage_Tag {
  PdMessage_Pd3p2SinkCapabilitiesExtended,
  PdMessage_Pd3p2SourceCapabilitiesExtended,
  PdMessage_Pd3p2BatteryCapabilities,
  PdMessage_Pd3p2BatteryStatus,
  PdMessage_Pd3p2DiscoverIdentityResponse,
  PdMessage_Pd3p2Revision,
};

struct PdMessage {
  enum PdMessage_Tag tag;
  union {
    struct {
      struct Pd3p2SinkCapabilitiesExtended pd3p2_sink_capabilities_extended;
    };
    struct {
      struct Pd3p2SourceCapabilitiesExtended pd3p2_source_capabilities_extended;
    };
    struct {
      struct Pd3p2BatteryCapData pd3p2_battery_capabilities;
    };
    struct {
      struct Pd3p2BatteryStatusData pd3p2_battery_status;
    };
    struct {
      struct Pd3p2DiscoverIdentityResponse pd3p2_discover_identity_response;
    };
    struct {
      struct Pd3p2RevisionMessageData pd3p2_revision;
    };
  };
};

/**
 * A wrapper that can pretty-print the underlying millivolt value.
 */
typedef uint32_t TypeCRs_Millivolt;

/**
 * A wrapper that can pretty-print the underlying milliamp value.
 */
typedef uint32_t TypeCRs_Milliamp;

struct Pd3p2FixedSupplyPdo {
  bool dual_role_power;
  bool higher_capability;
  bool unconstrained_power;
  bool usb_communications_capable;
  bool dual_role_data;
  enum Pd3p2FastRoleSwap fast_role_swap;
  TypeCRs_Millivolt voltage;
  TypeCRs_Milliamp operational_current;
};

/**
 * A wrapper that can pretty-print the underlying milliwatt value.
 */
typedef uint32_t TypeCRs_Milliwatt;

struct Pd3p2BatterySupplyPdo {
  TypeCRs_Millivolt max_voltage;
  TypeCRs_Millivolt min_voltage;
  TypeCRs_Milliwatt operational_power;
};

struct Pd3p2VariableSupplyPdo {
  TypeCRs_Millivolt max_voltage;
  TypeCRs_Millivolt min_voltage;
  TypeCRs_Milliamp max_current;
};

struct Pd3p2SprProgrammableSupplyPdo {
  TypeCRs_Millivolt max_voltage;
  TypeCRs_Millivolt min_voltage;
  TypeCRs_Milliamp max_current;
};

enum PdPdo_Tag {
  PdPdo_Pd3p2FixedSupplyPdo,
  PdPdo_Pd3p2BatterySupplyPdo,
  PdPdo_Pd3p2VariableSupplyPdo,
  PdPdo_Pd3p2AugmentedPdo,
};

struct PdPdo {
  enum PdPdo_Tag tag;
  union {
    struct {
      struct Pd3p2FixedSupplyPdo pd3p2_fixed_supply_pdo;
    };
    struct {
      struct Pd3p2BatterySupplyPdo pd3p2_battery_supply_pdo;
    };
    struct {
      struct Pd3p2VariableSupplyPdo pd3p2_variable_supply_pdo;
    };
    struct {
      struct Pd3p2SprProgrammableSupplyPdo pd3p2_augmented_pdo;
    };
  };
};

/**
 * Initializes the library given a `backend`.
 *
 * # Arguments
 * `backend` The backend to use, see `OsBackends` for available options.
 * `out_typec` An opaque pointer that gets initialized with the new
 * `TypecRs` instance.
 *
 * # Safety
 * The caller must call libtypec_rs_destroy() at a later point to free up
 * any allocated resources.
 *
 * # Returns
 * 0 on success, -errno on failure.
 */
int libtypec_rs_new(enum OsBackends backend, struct TypecRs **out_typec);

/**
 * Destroys the `typec` instance.
 *
 * # Safety
 * Must be called with a pointer that was previously acquired from
 * libtypec_rs_new().
 */
void libtypec_rs_destroy(struct TypecRs *typec);

/**
 * Returns the platform policy capabilities in `out_capabilities`
 * and 0 on success, -errno on failure.
 *
 * # Safety
 * The caller must ensure that out_capabilities is a valid pointer.
 */
int libtypec_rs_get_capabilities(struct TypecRs *self, struct UcsiCapability *out_capabilities);

/**
 * Returns the connector capabilities in `out_conn_capabilities`
 * and 0 on success, -errno on failure.
 *
 * # Arguments
 * `connector_nr` The connector number to query.
 *
 * # Safety
 * The caller must ensure that out_conn_capabilities is a valid pointer.
 */
int libtypec_rs_get_conn_capabilities(struct TypecRs *self,
                                      size_t connector_nr,
                                      struct UcsiConnectorCapability *out_conn_capabilities);

/**
 * Returns the alternate modes that the connector/cable/attached device is
 * able to support in in `out_alternate_modes` and 0 on success, -errno on
 * failure.
 *
 * # Arguments
 * `recipient` Represents alternate mode to be retrieved from local or SOP
 * or SOP' or SOP"
 * `connector_nr` The connector number to query.
 *
 * # Safety
 * The caller must ensure that `out_modes`, `out_nmodes` and `out_mem_sz`
 * are valid pointers. The caller must call
 * libtypec_rs_destroy_alternate_modes to free the memory allocated for
 * `out_modes` at a later point.
 */
int libtypec_rs_get_alternate_modes(struct TypecRs *self,
                                    enum UcsiGetAlternateModesRecipient recipient,
                                    size_t connector_nr,
                                    struct UcsiAlternateMode **out_modes,
                                    size_t *out_nmodes,
                                    size_t *out_mem_sz);

/**
 * Frees the memory returned by libtypec_rs_get_alternate_modes.
 *
 * # Safety
 * The caller must ensure that `modes`, `nmodes` and `mem_sz` are pointers
 * that were returned from a previous call to
 * libtypec_rs_get_alternate_modes().
 */
void libtypec_rs_destroy_alternate_modes(struct UcsiAlternateMode *modes,
                                         size_t nmodes,
                                         size_t mem_sz);

/**
 * Returns the cable property of a connector in `out_cable_properties` and
 * 0 on success, -errno on failure.
 *
 * # Arguments
 * `connector_nr` The connector number to query.
 *
 * # Safety
 * The caller must ensure that out_cable_properties is a valid pointer.
 */
int libtypec_rs_get_cable_properties(struct TypecRs *self,
                                     size_t connector_nr,
                                     struct UcsiCableProperty *out_cable_properties);

/**
 * Returns the connector status in `out_connector_status` and 0 on success,
 * -errno on failure.
 *
 * # Arguments
 * `connector_nr` The connector number to query.
 *
 * # Safety
 * The caller must ensure that out_connector_status is a valid pointer.
 */
int libtypec_rs_get_connector_status(struct TypecRs *self,
                                     size_t connector_nr,
                                     struct UcsiConnectorStatus *out_connector_status);

/**
 * Returns the USB PD response message in `out_pd_message` and 0 on
 * success, -errno on failure.
 *
 * # Arguments
 * `connector_nr` the connector number to retrieve the message from.
 *
 * `recipient` represents alternate mode to be retrieved from local or SOP
 * or SOP' or SOP"
 *
 * `response_type` indicates the type of response to be retrieved.
 *
 * # Safety
 * The caller must ensure that out_connector_status is a valid pointer.
 */
int libtypec_rs_get_pd_message(struct TypecRs *self,
                               size_t connector_nr,
                               enum PdMessageRecipient recipient,
                               enum PdMessageResponseType response_type,
                               struct PdMessage *out_pd_message);

/**
 * Gets PDOs from local and partner Policy Managers
 *
 * # Arguments
 * `conn_num` Represents connector to be queried
 * `partner`` Set to true to retrieve partner PDOs
 * `offset` Index from which PDO needs to be retrieved
 * `num_pdo` Represents number of PDOs to be retrieved
 * `src_or_sink_pdos` controls whether Source or Sink PDOs are requested
 * `source_capabilities_type` represents the type of Source PDOs requested
 *
 * # Safety
 * The caller must ensure that `out_pdos`, `out_npdos` and `out_mem_sz` are
 * valid pointers. The caller must call libtypec_rs_destroy_pdos to free the
 * memory allocated for `out_pdos` at a later point.
 *
 * # Returns
 * Returns 0 on success, -errno on failures.
 */
int libtypec_rs_get_pdos(struct TypecRs *self,
                         size_t connector_nr,
                         bool partner_pdo,
                         uint32_t pdo_offset,
                         size_t nr_pdos,
                         enum UcsiPdoType src_or_sink_pdos,
                         enum UcsiPdoSourceCapabilitiesType source_capabilities_type,
                         BcdWrapper revision,
                         struct PdPdo **out_pdos,
                         size_t *out_npdos,
                         size_t *out_mem_sz);

/**
 * Frees the memory returned by libtypec_rs_get_pdos.
 *
 * # Safety
 * The caller must ensure that `pdos`, `npdos` and `mem_sz` are pointers
 * that were returned from a previous call to libtypec_rs_get_pdos().
 */
void libtypec_rs_destroy_pdos(struct PdPdo *pdos, size_t npdos, size_t mem_sz);

#endif /* LIBTYPEC_RS_H */
